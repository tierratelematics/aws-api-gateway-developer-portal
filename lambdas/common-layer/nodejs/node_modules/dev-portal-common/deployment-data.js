'use strict'

const AWS = require('aws-sdk')
const s3 = new AWS.S3({ apiVersion: '2015-03-31' })

// Note: keep `func` as small as possible
// TODO: put this behind an SQS queue if this ever gets used by more than one function, to both
// reduce S3 writes and avoid race conditions.
exports.transact = async (task) => {
  // Given how infrequently this is updated, S3 is both cheaper and better.
  let data

  try {
    const response = await s3.getObject({
      Bucket: process.env.Bucket,
      Key: 'deployment-data.json'
    }).promise()

    data = JSON.parse(response.Body.toString('utf-8'))
  } catch (e) {
    data = {
      edgeLambdas: {}
    }
  }

  switch (task.type) {
    case 'linkEdge': {
      const entry = data.edgeLambdas[task.name]
      if (entry == null) data.edgeLambdas[task.name] = [task.newArn]
      else entry.push(task.newArn)
      break
    }

    default:
      throw new Error(`Unknown type: ${task.type}`)
  }

  await s3.putObject({
    Bucket: process.env.Bucket,
    Key: 'deployment-data.json',
    Body: JSON.stringify(data)
  })
}
