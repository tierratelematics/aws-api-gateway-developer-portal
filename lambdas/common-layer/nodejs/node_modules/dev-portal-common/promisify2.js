/**
 * Given a two-callback-parameters style function (i.e. one which accepts an
 * error-callback and success-callback as its final two parameters), returns a
 * new Promise-returning function.
 *
 * For example, with
 * ```javascript
 *  const getFooById = (fooId, error, callback) => {
 *    const foo = api.getFoo(fooId)
 *    if (foo.error) {
 *      error(foo.error)
 *    } else {
 *      callback(foo.data)
 *    }
 *  }
 * ```
 * the following are all equivalent:
 * ```javascript
 *  // Using promisify2 with Promise.then
 *  promisify2(getFooById)(42)
 *    .then(data => { processData(data) })
 *    .catch(error => { console.error('Error:', error) })
 *
 *  // Using promisify2 with await
 *  try {
 *    const data = await promisify2(getFooById)(42)
 *    processData(data)
 *  } catch (error) {
 *    console.error('Error:', error)
 *  }
 *
 *  // Without promisify2
 *  getFooById(42,
 *    error => { console.error('Error:', error) },
 *    data => { processData(data) },
 *  )
 * ```
 */
exports.promisify2 = f => (...args) =>
  new Promise((resolve, reject) => f(...args, reject, resolve))
